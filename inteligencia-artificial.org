#+TITLE: Inteligência aritifical 
#+LANGUAGE: pt-br
#+DESCRIPTION: Resumo dos conceitos de inteligência artificial
#+AUTHOR: Jackson de Jesus
#+EXPORT_FILE_NAME: ia.html
#+OPTIONS: num:nil html5-fancy:t
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

** Capítulo 1

| Conceito | Definição |
|---|---|
| Inteligência Artificial (IA) | Área da tecnologia que busca simular o pensamento ou a ação humana para facilitar operações complexas. |
|  | Ápice da história da tecnologia, desde ferramentas rudimentares até a simulação de processos inteligentes. |
|  | Não possui uma definição única, variando conforme a interpretação de como os processos da IA se correlacionam com o cérebro e a mente humana. |
| Definições de IA | Quatro categorias: sistemas que pensam como humanos, sistemas que pensam racionalmente, sistemas que agem como humanos e sistemas que agem racionalmente. |
| Linhas de Pesquisa em IA | Simbólica, conexionista e evolucionária. |
| Linha Simbólica | Busca simular processos inteligentes utilizando linguagens lógicas e redes semânticas. |
|  | Exemplos: linguagens LISP e PROLOG, sistemas especialistas e ontologias. |
| Linha Conexionista | Inspirada na estrutura e funcionamento do cérebro, busca criar sistemas que simulem o comportamento de neurônios. |
|  | Exemplos: Redes Neurais Artificiais (RNA) e Sistemas Imunológicos Artificiais. |
| Linha Evolucionária | Utiliza princípios da evolução biológica, como seleção natural e mutação, para desenvolver sistemas inteligentes. |
|  | Exemplos: Algoritmos Genéticos e Programação Genética. |
| História da IA | Dividida em eras clássica, romântica e moderna, cada uma com seus objetivos e desafios. |
|  | Marcada por avanços e desafios, com previsões otimistas e subestimação da complexidade da inteligência humana. |

*** Resumo das categorias
|               | **Humanos**                       | **Racionalidade**               |
|---------------|------------------------------------|-----------------------------------|
| **Pensar**    | Sistemas que pensam como seres humanos | Sistemas que pensam racionalmente |
| **Agir**      | Sistemas que agem como seres humanos | Sistemas que agem racionalmente | 

** Capítulo 2

| Conceito | Descrição |
|---|---|
| **Agente** | Um artefato com sensores para perceber o ambiente e atuadores para agir sobre ele. Análogo a um ser humano, com sensores como olhos e ouvidos, e atuadores como mãos e pernas. |
| **Sensores** | Permitem ao agente perceber o ambiente, capturando sinais como imagens, sons, temperatura, etc. |
| **Atuadores** | Permitem ao agente agir sobre o ambiente, executando ações como mover-se, emitir sons, etc. |
| **Percepções** | Sinais capturados pelos sensores do agente a partir do ambiente. São processadas para gerar ações. |
| **Ações** | Respostas do agente ao ambiente, executadas por meio de seus atuadores. |
| **Função do agente** | Mapeia as ações do agente com base em suas percepções. Define o comportamento do agente. Uma descrição matemática abstrata do comportamento. |
| **Programa do agente** | Implementação concreta da função do agente. Traduz o mapeamento abstrato em instruções executáveis. |
| **Agente racional** | Agente que seleciona ações para maximizar sua medida de desempenho. Considera o sucesso da tarefa em suas decisões. |
| **Medida de desempenho** | Critério objetivo para avaliar o sucesso do agente na execução da tarefa. Define o que significa um bom desempenho. |
| **Conhecimento prévio** | Informações sobre o ambiente que o agente possui antes de iniciar sua tarefa. Influencia as decisões do agente. |
| **Sequência de percepções** | Histórico de percepções do agente até o momento presente. As ações são escolhidas considerando todas as percepções anteriores. |
| **Ambiente de tarefa** | Descrição completa do ambiente onde o agente atua, incluindo medidas de desempenho, sensores, atuadores e características do ambiente. |
| **PEAS (Performance, Environment, Actuators, and Sensors)** | Abordagem para definir o ambiente de tarefa, especificando desempenho, ambiente, atuadores e sensores. |
| **Propriedades do ambiente** | Características que classificam o ambiente, como observabilidade, determinismo, episodicidade, dinamicidade, etc. |
| **Tipos de agentes (estruturas)** | Categorias que descrevem o funcionamento interno dos agentes: reativos simples, reativos baseados em modelo, baseados em objetivos e baseados em utilidade. |
| **Agente reativo simples** | Seleciona ações com base apenas na percepção atual, ignorando o histórico. |
| **Agente reativo baseado em modelo** | Mantém um modelo interno do mundo e o utiliza para tomar decisões. Considera como o mundo evolui. |
| **Agente baseado em objetivos** | Toma decisões considerando seus objetivos, buscando alcançar estados desejáveis. |
| **Agente baseado em utilidade** | Utiliza uma função de utilidade para quantificar a "felicidade" de um estado e tomar decisões que maximizem essa utilidade. |
| **Agente com aprendizagem** | Agente capaz de adquirir conhecimento a partir da experiência, melhorando seu desempenho ao longo do tempo. |

** Capítulo 3

| Conceito | Descrição |
|---|---|
| **Agente de resolução de problemas** | Um tipo de agente inteligente que se concentra em encontrar sequências de ações para atingir um estado desejável. Difere dos agentes reativos, que apenas mapeiam estados para ações. |
| **Formulação de problemas** | Processo crucial em IA que define quais estados e ações são relevantes para o problema, dado um objetivo específico. Envolve a escolha de representações adequadas para o problema. |
| **Espaço de estados** | Conjunto de todos os estados possíveis que podem ser alcançados a partir do estado inicial, considerando as ações disponíveis. Visualizado como um grafo onde os nós são estados e os arcos são ações. |
| **Componentes de um problema** |  Quatro elementos formais: 1) Estado inicial, 2) Função sucessor, 3) Teste de objetivo e 4) Função de custo. |
| **Estado inicial** | O estado em que o agente inicia a resolução do problema. |
| **Função sucessor** | Define os estados alcançáveis a partir de um estado específico, considerando as ações possíveis. Retorna um conjunto de pares ordenados <ação, sucessor>. |
| **Teste de objetivo** | Verifica se um estado alcançado corresponde ao estado desejado, determinando se o problema foi resolvido. |
| **Função de custo (ou função de custo de caminho)** | Atribui um custo numérico a cada caminho (sequência de ações) no espaço de estados. Utilizada para avaliar a qualidade das soluções. |
| **Solução ótima** | A solução com o menor custo entre todas as soluções possíveis para o problema. Encontrar a solução ótima é frequentemente o objetivo da resolução de problemas. |
| **Tipos de problemas** | Classificados em miniproblemas (ilustrativos, com descrições concisas) e problemas do mundo real (complexos, geralmente subdivididos em problemas menores). |
| **Exemplos de problemas** |  Robô aspirador, puzzle de 8 peças, problema de roteirização, problema do caixeiro viajante. |
| **Árvore de busca** | Estrutura utilizada por algumas técnicas de busca para representar o espaço de estados. A raiz é o estado inicial e os nós são expandidos usando a função sucessor. |
| **Estratégias de busca** | Métodos para explorar o espaço de estados e encontrar soluções. Classificadas em busca sem informação (cega) e busca com informação (heurística). |
| **Medidas de desempenho de busca** |  Completeza, otimização, complexidade de tempo e complexidade de espaço. |
| **Busca sem informação** |  Explora o espaço de estados sem conhecimento específico do problema. Exemplos: busca em extensão, busca de custo uniforme, busca em profundidade. |
| **Busca com informação** | Utiliza conhecimento adicional (heurísticas) para guiar a busca de forma mais eficiente. Exemplos: busca gulosa, algoritmo A*. |
| **Função heurística (h(n))** | Função que estima o custo do caminho mais barato do nó atual até o nó objetivo. Utilizada em buscas com informação para melhorar a eficiência. |

** Capítulo 4

| **Conceito**                         | **Definição**                                                                                                                                                       |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Sistemas Especialistas (SE)**      | Programas de computador que imitam o comportamento de especialistas humanos dentro de um domínio específico de conhecimento, sugerindo alternativas de ação.      |
| **Base de Conhecimento**             | Parte de um sistema especialista onde fica armazenado o conhecimento obtido do domínio, traduzido em regras e memória de trabalho.                                |
| **Quadro Negro**                     | Local onde as informações são alimentadas ao sistema, relacionadas às variáveis lidas do ambiente.                                                                 |
| **Mecanismo de Inferência**          | Responsável pelo encadeamento e teste das regras, fornecendo resultados com base nos fatos alimentados ao sistema.                                                  |
| **Aquisição de Conhecimento**        | Processo de coleta e análise de informações de especialistas e outras fontes, essencial para o desenvolvimento de um sistema especialista.                          |
| **Regras**                           | Sequências lógicas compostas por premissas (antecedentes) e conclusões (consequentes), usadas para representar o conhecimento em um sistema especialista.         |
| **Proposição**                       | Declaração que pode ser verdadeira ou falsa, usada para descrever relacionamentos em um sistema especialista.                                                      |
| **Programação em Lógica (Prolog)**   | Paradigma de programação baseado em lógica, especialmente útil para a criação de sistemas que raciocinam de acordo com a lógica de primeira ordem.                |
| **Coeficiente de Confiança**         | Valor utilizado em regras probabilísticas para indicar a probabilidade ou confiança de que uma ação irá acontecer no sistema especialista.                          |
| **Expert SINTA**                     | Shell utilizado para a implementação de sistemas especialistas, oferecendo funcionalidades como definição de variáveis e regras sem a necessidade de codificação complexa. |

** Capítulo 5

| Conceito | Descrição |
|---|---|
| Redes Neurais Artificiais (RNA) | Área de pesquisa da IA inspirada no cérebro humano, capaz de aprender padrões a partir de dados. |
| Neurônio (em RNA) | Unidade fundamental de processamento que simula o comportamento de um neurônio biológico. |
| Camadas | Estruturas que organizam os neurônios em uma RNA, incluindo camadas de entrada, ocultas e de saída. |
| Pesos Sinápticos | Valores que representam a força das conexões entre os neurônios, ajustados durante o aprendizado. |
| Função de Ativação | Função que define o estado de ativação de um neurônio com base na soma ponderada de suas entradas. |
| Aprendizagem | Processo pelo qual uma RNA ajusta seus pesos sinápticos para melhorar seu desempenho em uma tarefa. |
| Aprendizagem Supervisionada | Tipo de aprendizado em que a RNA recebe exemplos de entrada e saída desejada para ajustar seus pesos. |
| Aprendizagem Não Supervisionada | Tipo de aprendizado em que a RNA aprende padrões nos dados sem receber exemplos de saída desejada. |
| Perceptron | Modelo clássico de RNA que pode aprender a classificar padrões linearmente separáveis. |
| Perceptron Multicamadas (MLP) | Tipo de perceptron com camadas ocultas que permite a aprendizagem de padrões não linearmente separáveis. |
| Retropropagação | Algoritmo de aprendizado supervisionado usado em MLPs para ajustar os pesos sinápticos com base no erro. |
| Função Sigmoide | Função de ativação suave e contínua frequentemente utilizada em MLPs. |
| Normalização | Processo de ajustar os valores de entrada para um intervalo específico, facilitando o treinamento da RNA. | 

** Capítulo 6

| Conceito | Descrição |
|---|---|
| Algoritmos Genéticos (AG) | Classe de algoritmos de busca inspirados na teoria da evolução de Darwin, utilizados para encontrar soluções ótimas em problemas complexos. |
| Função Objetivo (Fitness) | Função que avalia a qualidade de uma solução candidata, guiando o processo de busca do AG. |
| População | Conjunto de soluções candidatas (indivíduos) que evoluem ao longo das gerações do AG. |
| Indivíduo | Uma solução candidata dentro da população do AG, representando um ponto no espaço de busca. |
| Cromossomo | Representação codificada de um indivíduo no AG, geralmente utilizando uma sequência de bits (genes). |
| Gene | Unidade básica de informação dentro de um cromossomo, representando uma característica específica da solução. |
| Seleção | Operador que escolhe indivíduos da população para reprodução, geralmente favorecendo aqueles com maior fitness. |
| Roleta Viciada | Método de seleção que atribui probabilidades de seleção aos indivíduos proporcionais ao seu fitness. |
| Cruzamento (Crossover) | Operador que combina os cromossomos de dois indivíduos pais para criar novos indivíduos filhos. |
| Ponto de Corte | Posição aleatória ou pré-definida no cromossomo onde ocorre a troca de material genético durante o crossover. |
| Mutação | Operador que introduz pequenas alterações aleatórias nos genes dos indivíduos, promovendo a diversidade genética. |
| Taxa de Mutação | Parâmetro que controla a frequência com que as mutações ocorrem na população. |
| Tamanho da População | Número de indivíduos que compõem a população do AG, influenciando a diversidade e o tempo de execução. |
| Condições de Terminação | Critérios que definem quando o AG deve parar de executar, como um número máximo de gerações ou a convergência para uma solução satisfatória. | 

** Observações...

*** Como organizei o conteúdo desta página

Esta página contém resumos dos principais conceitos de banco de dados extraídos de arquivos no formato PDF com a ferramenta [[https://notebooklm.google.com][NotebookLM]].

De forma simples, enviei os arquivos para o NotebookLM e pedi os resumos com os seguintes comandos:

*Organize uma tabela com os principais conceitos do texto. Na primeira coluna, o nome do conceito e na segunda, o conceito em si.*

A partir do segundo pedido, usei o comando:

*Repita o processo anterior para este texto.*

No terceiro pedido, recebi a mensage de:

*O comando fornecido solicita que o processo anterior seja repetido. No entanto, não há processo anterior no histórico de conversas fornecido. [Me] Para obter uma resposta abrangente, forneça o processo anterior que você gostaria que fosse repetido.*

Desta forma, alternei entre o primeiro e segundo comando até o último arquivo, que veio com a formatação Markdown deformada. Então, pedi uma última revisão com o comando:

*Refaça a tabela para uma melhor formatação em Markdown.*

Especificamente no arquivo do quarto capítulo, a ferramenta NotebookLM não conseguiu repetir o mesmo processo dos capítulos anteriores, mesmo eu testanto alterações no texto da solicitação. Ao consultar o arquivo, percebi que ele possui muitas imagens e suponho que este tenha sido o motivo dela não ter conseguido fazer o resumo, mesmo eu mudando o prompt para o seguinte texto:

*Ignore as imagens do texto e organize uma tabela com os principais conceitos, na primeira coluna, o nome do conceito e na segunda, o conceito em si.*

Então, fiz a mesma solicitação ao [[https://chatgpt.com][ChatGPT]] e o resultado é a parte correspondente ao capítulo 4.

A publicação final continua uma exportação simples, do formato org mode para HTML, usando o Emacs.

* [[./index.html][Voltar para o início...]]
